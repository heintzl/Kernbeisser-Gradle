/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kernbeisser.StartUp;

import kernbeisser.DBConnection.DBConnection;
import kernbeisser.DBEntitys.Item;
import kernbeisser.DBEntitys.PriceList;
import kernbeisser.DBEntitys.Supplier;
import kernbeisser.DBEntitys.User;
import kernbeisser.Enums.ContainerDefinition;
import kernbeisser.Enums.Cooling;
import kernbeisser.Enums.Unit;
import kernbeisser.Useful.Tools;

import javax.persistence.EntityManager;
import javax.persistence.EntityTransaction;
import javax.persistence.NoResultException;
import javax.swing.*;
import java.io.File;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;
import java.sql.Date;
import java.time.LocalDate;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.HashSet;
import java.util.List;

/**
 *
 * @author julik
 */
public class StartUp extends javax.swing.JFrame {

    /**
     * Creates new form StartUp
     */
    public StartUp() {
        initComponents();
        setLocationRelativeTo(null);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        searchDataSet = new javax.swing.JButton();
        dataSetURL = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        importUser = new javax.swing.JCheckBox();
        jLabel3 = new javax.swing.JLabel();
        importPriceList = new javax.swing.JCheckBox();
        importItems = new javax.swing.JCheckBox();
        importSupplier = new javax.swing.JCheckBox();
        importData = new javax.swing.JButton();
        importNoData = new javax.swing.JButton();
        jPanel1 = new javax.swing.JPanel();
        supplierPB = new javax.swing.JProgressBar();
        jLabel4 = new javax.swing.JLabel();
        itemPB = new javax.swing.JProgressBar();
        jLabel5 = new javax.swing.JLabel();
        priceListPB = new javax.swing.JProgressBar();
        jLabel6 = new javax.swing.JLabel();
        userPB = new javax.swing.JProgressBar();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        totalPB = new javax.swing.JProgressBar();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jLabel1.setText("Alte Kernbeisserdaten importieren?");

        searchDataSet.setText("Suchen");
        searchDataSet.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                searchDataSetActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 0, 14)); // NOI18N
        jLabel2.setText("Datensatz");

        importUser.setText("Nutzer");

        jLabel3.setText("Folgende Daten \u00fcbernehmen:");

        importPriceList.setText("Preislisten");
        importPriceList.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importPriceListActionPerformed(evt);
            }
        });

        importItems.setText("Artikel");

        importSupplier.setText("Lieferanten");

        importData.setForeground(new java.awt.Color(0, 153, 0));
        importData.setText("Daten Importieren");
        importData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importDataActionPerformed(evt);
            }
        });

        importNoData.setForeground(new java.awt.Color(255, 153, 0));
        importNoData.setText("Keine Daten Importieren");
        importNoData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importNoDataActionPerformed(evt);
            }
        });

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Prozess"));

        jLabel4.setText("Lieferanten:");

        jLabel5.setText("Arikel:");

        jLabel6.setText("Preislisten:");

        jLabel7.setText("Nutzer");

        jLabel8.setText("Insgesammt:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel7)
                                        .addComponent(jLabel6)
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel4)
                                        .addComponent(supplierPB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(itemPB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(priceListPB, javax.swing.GroupLayout.DEFAULT_SIZE, 375, Short.MAX_VALUE)
                                        .addComponent(jLabel8)
                                        .addComponent(totalPB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                        .addComponent(userPB, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
                jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addComponent(jLabel7)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(userPB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel6)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(priceListPB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(jLabel5)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(itemPB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(supplierPB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(45, 45, 45)
                                .addComponent(jLabel8)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(totalPB, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addContainerGap(31, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addComponent(importNoData)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addComponent(importData))
                                        .addGroup(layout.createSequentialGroup()
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                        .addComponent(jLabel3)
                                                        .addComponent(importUser)
                                                        .addComponent(jLabel2)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addComponent(dataSetURL, javax.swing.GroupLayout.PREFERRED_SIZE, 200, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                                .addComponent(searchDataSet))
                                                        .addComponent(importSupplier)
                                                        .addGroup(layout.createSequentialGroup()
                                                                .addGap(21, 21, 21)
                                                                .addComponent(importItems))
                                                        .addComponent(jLabel1)
                                                        .addComponent(importPriceList))
                                                .addGap(30, 30, 30)
                                                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                                .addGap(19, 19, 19))))
        );
        layout.setVerticalGroup(
                layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(layout.createSequentialGroup()
                                                .addComponent(jLabel1)
                                                .addGap(35, 35, 35)
                                                .addComponent(jLabel2)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                                        .addComponent(dataSetURL, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                        .addComponent(searchDataSet))
                                                .addGap(18, 18, 18)
                                                .addComponent(jLabel3)
                                                .addGap(6, 6, 6)
                                                .addComponent(importUser)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(importPriceList)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                                .addComponent(importItems)
                                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                                .addComponent(importSupplier)
                                                .addGap(0, 0, Short.MAX_VALUE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                                .addGap(0, 18, Short.MAX_VALUE)
                                                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                                .addGap(18, 18, 18)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                        .addComponent(importData)
                                        .addComponent(importNoData))
                                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void searchDataSetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_searchDataSetActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        fileChooser.addActionListener((e)-> dataSetURL.setText(fileChooser.getSelectedFile().getAbsolutePath()));
        fileChooser.showOpenDialog(this);
    }//GEN-LAST:event_searchDataSetActionPerformed

    private synchronized void importDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importDataActionPerformed
        new Thread(()-> {
            try {
                importData.setEnabled(false);
                importNoData.setEnabled(false);
                extractDataSet(new File(dataSetURL.getText()));
                finish();
                dispose();
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this,"Das angegebene Dataset kann nicht verwndet werden!","Dataset fehlerhaft",JOptionPane.ERROR_MESSAGE);
            }
        }).start();

    }//GEN-LAST:event_importDataActionPerformed
    private synchronized void finish(){
        notify();
    }
    private void importNoDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importNoDataActionPerformed
        dispose();
        finish();
    }//GEN-LAST:event_importNoDataActionPerformed

    private void importPriceListActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importPriceListActionPerformed
        importItems.setEnabled(importPriceList.isSelected());
        importItems.setSelected(importPriceList.isSelected());

    }//GEN-LAST:event_importPriceListActionPerformed
    public synchronized void waitFor(){
        try {
            wait();
        } catch (InterruptedException e) {
            e.printStackTrace();
        }
    }
    private File get(File[] files,String name){
        for(File f :files){
            if(f.getName().toUpperCase().contains(name.toUpperCase()))return f;
        }
        return null;
    }
    private void extractDataSet(File file) throws IOException {
        if(!file.isDirectory())return;
        File[] files = file.listFiles();
        EntityManager em = DBConnection.getEntityManager();
        EntityTransaction et = em.getTransaction();
        et.begin();
        File userFile = get(files,"user");
        File itemFile = get(files,"item");
        File supplierFile = get(files,"supplier");
        File priceListFile = get(files,"priceList");
        if(userFile!=null&&importUser.isSelected()){
            int c = 0;
            List<String> lines = Files.readAllLines(userFile.toPath(), StandardCharsets.UTF_8);
            userPB.setMaximum(lines.size());
            for (String l : Files.readAllLines(userFile.toPath(), StandardCharsets.UTF_8)) {
                String[] columns = l.split(";");
                User user = new User();
                em.persist(user);
                userPB.setValue(++c);
            }
        }else {
            userPB.setValue(100);
        }
        em.flush();
        if(supplierFile!=null&&importSupplier.isSelected()){
            int c = 0;
            List<String> lines = Files.readAllLines(supplierFile.toPath(), StandardCharsets.UTF_8);
            supplierPB.setMaximum(lines.size());
            for (String l : Files.readAllLines(supplierFile.toPath(), StandardCharsets.UTF_8)) {
                String[] columns = l.split(";");
                Supplier supplier = new Supplier();
                supplier.setShortName(columns[0]);
                supplier.setName(columns[1]);
                supplier.setPhoneNumber(columns[2]);
                supplier.setEmail(columns[3]);
                supplier.setAddress(columns[4] + ";" + columns[5]);
                supplier.setKeeper(columns[6]);
                em.persist(supplier);
                supplierPB.setValue(++c);
            }
        }
        em.flush();
        if(priceListFile!=null&&importPriceList.isSelected()){
            int c = 0;
            List<String> lines = Files.readAllLines(priceListFile.toPath(), StandardCharsets.UTF_8);
            priceListPB.setMaximum(lines.size());
            for (String l : lines) {
                String[] columns = l.split(";");
                PriceList pl = new PriceList();
                pl.setName(columns[0]);
                if (!columns[1].equals("NULL")) {
                    try {
                        pl.setSuperPriceList(em.createQuery("select p from PriceList p where name like  '" + columns[1] + "'", PriceList.class).getSingleResult());
                    } catch (NoResultException e) {
                        pl.setSuperPriceList(null);
                    }
                }
                em.persist(pl);
                priceListPB.setValue(++c);
            }
        }else {
            priceListPB.setValue(100);
        }
        em.flush();
        if(itemFile!=null&&importItems.isSelected()){
            int c = 0;
            List<String> lines = Files.readAllLines(itemFile.toPath(), StandardCharsets.UTF_8);
            HashSet<Long> barcode = new HashSet<>(lines.size());
            HashMap<String,PriceList> priceListHashMap = new HashMap<>();
            PriceList.getAll(null).forEach(e -> priceListHashMap.put(e.getName(),e));
            itemPB.setMaximum(lines.size());
            for (String l : lines) {
                String[] columns = l.split(";");
                Item item = new Item();
                item.setName(columns[1]);
                item.setKbNumber(Integer.parseInt(columns[2]));
                item.setAmount(Integer.parseInt(columns[3]));
                item.setNetPrice(Integer.parseInt(columns[4]));
                item.setSupplier(em.createQuery("select s from Supplier s where shortName like '" + columns[5].replace("GRE", "GR") + "'", Supplier.class).getSingleResult());
                try{
                    Long ib = Long.parseLong(columns[6]);
                    if (!barcode.contains(ib)) {
                        item.setBarcode(ib);
                        barcode.add(ib);
                    } else {
                        item.setBarcode(null);
                    }
                } catch (NumberFormatException e) {
                    item.setBarcode(null);
                }
                item.setSpecialPriceNet(Integer.parseInt(columns[7]));
                item.setVatLow(Boolean.parseBoolean(columns[8]));
                item.setSurcharge(Integer.parseInt(columns[9]));
                item.setSingleDeposit(Integer.parseInt(columns[10]));
                item.setCrateDeposit(Integer.parseInt(columns[11]));
                item.setUnit(Unit.valueOf(columns[12].replace("WEIGHT", "GRAM")));
                item.setPriceList(priceListHashMap.get(columns[13]));
                item.setContainerDef(ContainerDefinition.valueOf(columns[14]));
                item.setContainerSize(Double.parseDouble(columns[15].replaceAll(",", ".")));
                item.setSuppliersItemNumber(Integer.parseInt(columns[16]));
                item.setWeighAble(Boolean.parseBoolean(columns[17]));
                item.setListed(Boolean.parseBoolean(columns[18]));
                item.setShowInShop(Boolean.parseBoolean(columns[19]));
                item.setDeleted(Boolean.parseBoolean(columns[20]));
                item.setPrintAgain(Boolean.parseBoolean(columns[21]));
                item.setDeleteAllowed(Boolean.parseBoolean(columns[22]));
                item.setLoss(Integer.parseInt(columns[23]));
                item.setInfo(columns[24]);
                item.setSold(Integer.parseInt(columns[25]));
                item.setSpecialPriceMonth(Tools.extract(ArrayList::new, columns[26], "_", Boolean::parseBoolean));
                item.setDelivered(Integer.parseInt(columns[27]));
                item.setInvShelf(Tools.extract(ArrayList::new, columns[28], "_", Integer::parseInt));
                item.setInvStock(Tools.extract(ArrayList::new, columns[29], "_", Integer::parseInt));
                item.setInvPrice(Integer.parseInt(columns[30]));
                item.setIntake(Date.valueOf(LocalDate.now()));
                item.setLastBuy(null);
                item.setLastDelivery(Date.valueOf(LocalDate.now()));
                item.setDeletedDate(null);
                item.setCooling(Cooling.valueOf(columns[35]));
                item.setCoveredIntake(Boolean.parseBoolean(columns[36]));
                em.persist(item);
                itemPB.setValue(++c);
            }
        }
        else {
            itemPB.setValue(100);
        }
        em.flush();
        et.commit();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField dataSetURL;
    private javax.swing.JButton importData;
    private javax.swing.JCheckBox importItems;
    private javax.swing.JButton importNoData;
    private javax.swing.JCheckBox importPriceList;
    private javax.swing.JCheckBox importSupplier;
    private javax.swing.JCheckBox importUser;
    private javax.swing.JProgressBar itemPB;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JProgressBar priceListPB;
    private javax.swing.JButton searchDataSet;
    private javax.swing.JProgressBar supplierPB;
    private javax.swing.JProgressBar totalPB;
    private javax.swing.JProgressBar userPB;
    // End of variables declaration//GEN-END:variables
}
