package kernbeisser.Windows.Inventory.Counting;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import java.awt.*;
import java.util.Collection;
import java.util.Optional;
import javax.swing.*;
import jiconfont.IconCode;
import jiconfont.icons.font_awesome.FontAwesome;
import kernbeisser.CustomComponents.ComboBox.AdvancedComboBox;
import kernbeisser.CustomComponents.ObjectTable.Columns.Columns;
import kernbeisser.CustomComponents.ObjectTable.ObjectTable;
import kernbeisser.CustomComponents.TextFields.DoubleParseField;
import kernbeisser.DBEntities.ArticleStock;
import kernbeisser.DBEntities.Shelf;
import kernbeisser.Security.StaticMethodTransformer.StaticAccessPoint;
import kernbeisser.Useful.Tools;
import kernbeisser.Windows.MVC.IView;
import kernbeisser.Windows.MVC.Linked;
import org.jetbrains.annotations.NotNull;

public class CountingView implements IView<CountingController> {
  private JPanel main;
  private JButton commit;
  private DoubleParseField amount;
  private JButton apply;
  private JLabel articleName;
  private ObjectTable<ArticleStock> articleStocks;
  private AdvancedComboBox<Shelf> shelf;
  private JLabel articleNumber;
  private JButton addArticle;

  @Linked private CountingController controller;

  @Override
  public void initialize(CountingController controller) {
    shelf.addSelectionListener(controller::loadShelf);
    apply.addActionListener(e -> applyAmount());
    amount.addActionListener(e -> applyAmount());
    addArticle.addActionListener(e -> controller.addArticleStock());
    articleStocks.addSelectionListener(this::loadArticleStock);
    articleStocks.getSelectionModel().setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  }

  Optional<Shelf> getSelectedShelf() {
    return shelf.getSelected();
  }

  void setArticleStocks(Collection<ArticleStock> articleStocks) {
    this.articleStocks.setObjects(articleStocks);
  }

  @Override
  public @NotNull JComponent getContent() {
    return main;
  }

  private void createUIComponents() {
    articleStocks =
        new ObjectTable<>(
            Columns.create("Artikelnummer", e -> e.getArticle().getKbNumber()),
            Columns.create("Artikelname", e -> e.getArticle().getName()),
            Columns.create("Gezählte Menge", ArticleStock::getCounted));
    shelf = new AdvancedComboBox<>(Shelf::getLocation);
  }

  void applyAmount() {
    int selectedIndex = articleStocks.getSelectionModel().getMinSelectionIndex();
    articleStocks.getSelectedObject().ifPresent(e -> controller.setStock(e, amount.getSafeValue()));
    if (selectedIndex == articleStocks.getObjects().size()) {
      Tools.beep();
      return;
    }
    articleStocks.getSelectionModel().setSelectionInterval(selectedIndex + 1, selectedIndex + 1);
    articleStocks.getSelectedObject().ifPresent(this::loadArticleStock);
  }

  void loadArticleStock(ArticleStock stock) {
    amount.setText(String.valueOf(stock.getCounted()));
    articleName.setText(stock.getArticle().getName());
    articleNumber.setText(String.valueOf(stock.getArticle().getKbNumber()));
    amount.requestFocus();
    amount.setSelectionStart(0);
    amount.setSelectionEnd(amount.getText().length() - 1);
  }

  public void setShelves(Collection<Shelf> allShelves) {
    shelf.setItems(allShelves);
  }

  public void selectFirst() {
    if (!articleStocks.getObjects().isEmpty()) {
      articleStocks.getSelectionModel().setSelectionInterval(0, 0);
    }
  }

  @Override
  public IconCode getTabIcon() {
    return FontAwesome.LIST;
  }

  @Override
  @StaticAccessPoint
  public String getTitle() {
    return "Zähl Ergebnisse eingeben";
  }

  {
    // GUI initializer generated by IntelliJ IDEA GUI Designer
    // >>> IMPORTANT!! <<<
    // DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT edit this method OR
   * call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    createUIComponents();
    main = new JPanel();
    main.setLayout(new GridLayoutManager(7, 4, new Insets(5, 5, 5, 5), -1, -1));
    commit = new JButton();
    commit.setText("Eingabe abschließen");
    main.add(
        commit,
        new GridConstraints(
            6,
            3,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_FIXED,
            null,
            null,
            null,
            0,
            false));
    final Spacer spacer1 = new Spacer();
    main.add(
        spacer1,
        new GridConstraints(
            6,
            2,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_WANT_GROW,
            1,
            null,
            null,
            null,
            0,
            false));
    amount = new DoubleParseField();
    main.add(
        amount,
        new GridConstraints(
            6,
            0,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_WANT_GROW,
            GridConstraints.SIZEPOLICY_FIXED,
            null,
            new Dimension(150, -1),
            null,
            0,
            false));
    apply = new JButton();
    apply.setText("Übernehmen");
    main.add(
        apply,
        new GridConstraints(
            6,
            1,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_FIXED,
            null,
            null,
            null,
            0,
            false));
    final JLabel label1 = new JLabel();
    label1.setText("Bestand von ");
    main.add(
        label1,
        new GridConstraints(
            3,
            0,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_FIXED,
            GridConstraints.SIZEPOLICY_FIXED,
            null,
            null,
            null,
            0,
            false));
    articleName = new JLabel();
    articleName.setText("");
    main.add(
        articleName,
        new GridConstraints(
            4,
            0,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_FIXED,
            GridConstraints.SIZEPOLICY_FIXED,
            null,
            null,
            null,
            0,
            false));
    articleNumber = new JLabel();
    articleNumber.setText("");
    main.add(
        articleNumber,
        new GridConstraints(
            5,
            0,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_FIXED,
            GridConstraints.SIZEPOLICY_FIXED,
            null,
            null,
            null,
            0,
            false));
    final JScrollPane scrollPane1 = new JScrollPane();
    main.add(
        scrollPane1,
        new GridConstraints(
            2,
            0,
            1,
            4,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_BOTH,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,
            null,
            null,
            null,
            0,
            false));
    scrollPane1.setViewportView(articleStocks);
    final JLabel label2 = new JLabel();
    label2.setText("Regal:");
    main.add(
        label2,
        new GridConstraints(
            0,
            0,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_FIXED,
            GridConstraints.SIZEPOLICY_FIXED,
            null,
            null,
            null,
            0,
            false));
    main.add(
        shelf,
        new GridConstraints(
            1,
            0,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    addArticle = new JButton();
    addArticle.setText("Artikel der Liste hinzufügen");
    main.add(
        addArticle,
        new GridConstraints(
            3,
            3,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_FIXED,
            null,
            null,
            null,
            0,
            false));
  }

  /** @noinspection ALL */
  public JComponent $$$getRootComponent$$$() {
    return main;
  }
}
