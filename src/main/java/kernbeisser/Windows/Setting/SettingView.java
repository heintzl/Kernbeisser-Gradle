package kernbeisser.Windows.Setting;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import java.awt.*;
import java.util.Collection;
import java.util.Locale;
import java.util.Optional;
import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import jiconfont.IconCode;
import jiconfont.icons.font_awesome.FontAwesome;
import jiconfont.swing.IconFontSwing;
import kernbeisser.CustomComponents.ObjectTable.Columns.Columns;
import kernbeisser.CustomComponents.ObjectTable.ObjectTable;
import kernbeisser.Enums.Setting;
import kernbeisser.Security.StaticMethodTransformer.StaticAccessPoint;
import kernbeisser.Windows.MVC.IView;
import org.jetbrains.annotations.NotNull;

public class SettingView implements IView<SettingController> {

  private ObjectTable<Setting> settingValues;
  private JButton cancel;
  private JPanel main;
  private JButton applyChange;
  private JTextField value;
  private JLabel setting;
  private JButton resetSettings;
  private SettingController controller;

  @Override
  public void initialize(SettingController controller) {
    resetSettings.addActionListener(e -> controller.resetAllSettings());
    resetSettings.setIcon(
        IconFontSwing.buildIcon(FontAwesome.TRASH, 20, resetSettings.getForeground()));
    resetSettings.setHorizontalTextPosition(SwingConstants.LEFT);
    settingValues.setColumns(
        Columns.create("Einstellung", Setting::toString, SwingConstants.LEFT),
        Columns.create("Wert", Setting::getValue, SwingConstants.LEFT),
        Columns.create("Standard", Setting::getDefaultValue, SwingConstants.LEFT));
    settingValues.addSelectionListener(controller::select);
    applyChange.addActionListener(e -> controller.apply());
    cancel.addActionListener(e -> controller.cancel());
  }

  void setValues(Collection<Setting> values) {
    settingValues.setObjects(values);
  }

  void setValue(String s) {
    value.setText(s);
  }

  String getValue() {
    return value.getText();
  }

  void setSelectedSetting(Setting selectedSetting) {
    setting.setText(selectedSetting.toString());
  }

  Optional<Setting> getSelectedValue() {
    return settingValues.getSelectedObject();
  }

  @Override
  public @NotNull JComponent getContent() {
    return main;
  }

  private void createUIComponents() {
    settingValues = new ObjectTable<>();
  }

  public void setEditEnable(boolean b) {
    applyChange.setEnabled(b);
  }

  boolean commitType(String type) {
    return JOptionPane.showConfirmDialog(
            getTopComponent(),
            "Der eingegebene Wert ist anders als erwartet\n"
                + "Erwartet: "
                + type
                + "\n"
                + "Soll der Wert trotzdem verändert werden? (Dies kann Fehler hervorrufen)")
        == 0;
  }

  public boolean commitResetSettings() {
    return JOptionPane.showConfirmDialog(
            getTopComponent(),
            "Sollen wirklich alle Einstellungen außer "
                + Setting.DB_INITIALIZED.name()
                + " zurückgesetzt werden?")
        == 0;
  }

  public static boolean confirmAccounting() {
    return JOptionPane.showConfirmDialog(
            null,
            "Dieser Wert darf nur in Absprache mit der Buchhaltung geändert werden!\n"
                + "Bist Du 100% sicher, dass Du den Wert anpassen musst?",
            "Riskante Anpassung",
            JOptionPane.YES_NO_OPTION)
        == JOptionPane.YES_OPTION;
  }

  @Override
  @StaticAccessPoint
  public IconCode getTabIcon() {
    return FontAwesome.WRENCH;
  }

  @Override
  public String getTitle() {
    return "Einstellungen";
  }

  {
    // GUI initializer generated by IntelliJ IDEA GUI Designer
    // >>> IMPORTANT!! <<<
    // DO NOT EDIT OR ADD ANY CODE HERE!
    $$$setupUI$$$();
  }

  /**
   * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT edit this method OR
   * call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
    createUIComponents();
    main = new JPanel();
    main.setLayout(new GridLayoutManager(3, 1, new Insets(5, 5, 5, 5), -1, -1));
    final JScrollPane scrollPane1 = new JScrollPane();
    main.add(
        scrollPane1,
        new GridConstraints(
            0,
            0,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_BOTH,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW,
            null,
            null,
            null,
            0,
            false));
    scrollPane1.setViewportView(settingValues);
    final JPanel panel1 = new JPanel();
    panel1.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
    main.add(
        panel1,
        new GridConstraints(
            2,
            0,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_BOTH,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    final Spacer spacer1 = new Spacer();
    panel1.add(
        spacer1,
        new GridConstraints(
            0,
            1,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_WANT_GROW,
            1,
            null,
            null,
            null,
            0,
            false));
    cancel = new JButton();
    cancel.setText("Abbrechen");
    panel1.add(
        cancel,
        new GridConstraints(
            0,
            0,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_FIXED,
            null,
            null,
            null,
            0,
            false));
    final JPanel panel2 = new JPanel();
    panel2.setLayout(new GridLayoutManager(3, 4, new Insets(0, 0, 0, 0), -1, -1));
    main.add(
        panel2,
        new GridConstraints(
            1,
            0,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_BOTH,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            null,
            null,
            null,
            0,
            false));
    applyChange = new JButton();
    Font applyChangeFont = this.$$$getFont$$$(null, Font.BOLD, -1, applyChange.getFont());
    if (applyChangeFont != null) applyChange.setFont(applyChangeFont);
    applyChange.setForeground(new Color(-16729595));
    applyChange.setText("Wert übernehmen");
    panel2.add(
        applyChange,
        new GridConstraints(
            2,
            3,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_FIXED,
            null,
            null,
            null,
            0,
            false));
    final Spacer spacer2 = new Spacer();
    panel2.add(
        spacer2,
        new GridConstraints(
            2,
            2,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_WANT_GROW,
            1,
            null,
            null,
            null,
            0,
            false));
    value = new JTextField();
    panel2.add(
        value,
        new GridConstraints(
            2,
            0,
            1,
            2,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_WANT_GROW,
            GridConstraints.SIZEPOLICY_FIXED,
            null,
            new Dimension(150, -1),
            null,
            0,
            false));
    final JLabel label1 = new JLabel();
    label1.setText("Wert");
    panel2.add(
        label1,
        new GridConstraints(
            1,
            0,
            1,
            2,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_FIXED,
            GridConstraints.SIZEPOLICY_FIXED,
            null,
            null,
            null,
            0,
            false));
    final JLabel label2 = new JLabel();
    label2.setText("Ausgewählte Einstellung: ");
    panel2.add(
        label2,
        new GridConstraints(
            0,
            0,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_FIXED,
            GridConstraints.SIZEPOLICY_FIXED,
            null,
            null,
            null,
            0,
            false));
    setting = new JLabel();
    setting.setText("setting");
    panel2.add(
        setting,
        new GridConstraints(
            0,
            1,
            1,
            1,
            GridConstraints.ANCHOR_WEST,
            GridConstraints.FILL_NONE,
            GridConstraints.SIZEPOLICY_FIXED,
            GridConstraints.SIZEPOLICY_FIXED,
            null,
            null,
            null,
            0,
            false));
    resetSettings = new JButton();
    Font resetSettingsFont = this.$$$getFont$$$(null, Font.BOLD, -1, resetSettings.getFont());
    if (resetSettingsFont != null) resetSettings.setFont(resetSettingsFont);
    resetSettings.setForeground(new Color(-4563711));
    resetSettings.setText("Alle Einstellungen Zurücksetzen");
    panel2.add(
        resetSettings,
        new GridConstraints(
            0,
            3,
            1,
            1,
            GridConstraints.ANCHOR_CENTER,
            GridConstraints.FILL_HORIZONTAL,
            GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW,
            GridConstraints.SIZEPOLICY_FIXED,
            null,
            null,
            null,
            0,
            false));
  }

  /** @noinspection ALL */
  private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
    if (currentFont == null) return null;
    String resultName;
    if (fontName == null) {
      resultName = currentFont.getName();
    } else {
      Font testFont = new Font(fontName, Font.PLAIN, 10);
      if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
        resultName = fontName;
      } else {
        resultName = currentFont.getName();
      }
    }
    Font font =
        new Font(
            resultName,
            style >= 0 ? style : currentFont.getStyle(),
            size >= 0 ? size : currentFont.getSize());
    boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
    Font fontWithFallback =
        isMac
            ? new Font(font.getFamily(), font.getStyle(), font.getSize())
            : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
    return fontWithFallback instanceof FontUIResource
        ? fontWithFallback
        : new FontUIResource(fontWithFallback);
  }

  /** @noinspection ALL */
  public JComponent $$$getRootComponent$$$() {
    return main;
  }
}
