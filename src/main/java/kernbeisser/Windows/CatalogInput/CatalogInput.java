/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package kernbeisser.Windows.CatalogInput;

import kernbeisser.Windows.Finishable;
import kernbeisser.Windows.Finisher;

import javax.swing.*;
import java.io.IOException;
import java.nio.charset.StandardCharsets;
import java.nio.file.Files;

/**
 *
 * @author julik
 */
public abstract class CatalogInput extends JFrame implements Finishable {

    /**
     * Creates new form ItemDataInput
     */
    public CatalogInput() {
        initComponents();
        addWindowListener(new Finisher(this));
        pack();
        setLocationRelativeTo(null);
        setVisible(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new JScrollPane();
        data = new JTextArea();
        jLabel1 = new JLabel();
        kkItemData = new JButton();
        progressBar = new JProgressBar();
        importData = new JButton();

        setDefaultCloseOperation(WindowConstants.EXIT_ON_CLOSE);

        data.setColumns(20);
        data.setRows(5);
        jScrollPane1.setViewportView(data);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel1.setHorizontalAlignment(SwingConstants.CENTER);
        jLabel1.setText("Katalog Aktualiesieren");

        kkItemData.setText("Katalog Aktualiesieren");
        kkItemData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                kkItemDataActionPerformed(evt);
            }
        });

        importData.setText("Datei Ausw\u00e4hlen");
        importData.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                importDataActionPerformed(evt);
            }
        });

        GroupLayout layout = new GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(importData)
                        .addPreferredGap(LayoutStyle.ComponentPlacement.RELATED, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(kkItemData)
                        .addGap(32, 32, 32)
                        .addComponent(progressBar, GroupLayout.PREFERRED_SIZE, 509, GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(258, 258, 258)
                .addComponent(jLabel1, GroupLayout.PREFERRED_SIZE, 346, GroupLayout.PREFERRED_SIZE)
                .addContainerGap(243, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(GroupLayout.Alignment.LEADING)
            .addGroup(GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addContainerGap(GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, GroupLayout.PREFERRED_SIZE, 494, GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20)
                .addGroup(layout.createParallelGroup(GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createParallelGroup(GroupLayout.Alignment.BASELINE)
                        .addComponent(kkItemData)
                        .addComponent(importData))
                    .addComponent(progressBar, GroupLayout.DEFAULT_SIZE, GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    private void importDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_importDataActionPerformed
        JFileChooser fileChooser = new JFileChooser();
        if(fileChooser.showOpenDialog(this)==JFileChooser.APPROVE_OPTION){
            StringBuilder fileData = new StringBuilder();
            try {
                Files.readAllLines(fileChooser.getSelectedFile().toPath(), StandardCharsets.ISO_8859_1).forEach(e-> fileData.append(e).append("\n"));
            } catch (IOException e) {
                e.printStackTrace();
            }
            data.setText(fileData.toString());
        }

    }//GEN-LAST:event_importDataActionPerformed

    private void kkItemDataActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_kkItemDataActionPerformed
        new Thread(() -> {

        }).start();
    }//GEN-LAST:event_kkItemDataActionPerformed



    // Variables declaration - do not modify//GEN-BEGIN:variables
    private JTextArea data;
    private JButton importData;
    private JLabel jLabel1;
    private JScrollPane jScrollPane1;
    private JButton kkItemData;
    private JProgressBar progressBar;
    // End of variables declaration//GEN-END:variables
}
