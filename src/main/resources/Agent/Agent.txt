import java.io.ByteArrayInputStream;
import java.lang.instrument.ClassFileTransformer;
import java.lang.reflect.Modifier;
import java.security.ProtectionDomain;
import javassist.CannotCompileException;
import javassist.ClassPool;
import javassist.CtBehavior;
import javassist.CtClass;
import javassist.CtConstructor;
import javassist.CtMethod;
import javassist.LoaderClassPath;
import javassist.bytecode.AnnotationsAttribute;
import javassist.bytecode.annotation.Annotation;
import javassist.bytecode.annotation.LongMemberValue;

public class Proxyfier implements ClassFileTransformer {

  private final String classNamePrefix;
  private final String annotationMark;
  private final String staticMethodCall;
  private static transient long methodId = 0;

  public Proxyfier(String classNamePrefix, String annotationMark, String staticMethodCall) {
    this.classNamePrefix = classNamePrefix;
    this.annotationMark = annotationMark;
    this.staticMethodCall = staticMethodCall;
  }

  @Override
  public byte[] transform(ClassLoader loader, String className, Class<?> classBeingRedefined,
      ProtectionDomain protectionDomain, byte[] classfileBuffer) {
    if (!className.replace("/",".").startsWith(classNamePrefix)) {
      return classfileBuffer;
    }
    ClassPool classPool = new ClassPool();
    classPool.appendClassPath(new LoaderClassPath(loader));
    String contextMethod = null;
    try {
      Class<?> clazz = Class.forName(annotationMark);
      CtClass ctClass = classPool.makeClass(new ByteArrayInputStream(classfileBuffer));

      for (CtConstructor declaredConstructor : ctClass.getDeclaredConstructors()) {
        contextMethod = declaredConstructor.getName();
        insertPermissionChecks(declaredConstructor,clazz,true);
      }
      for (CtMethod declaredMethod : ctClass.getDeclaredMethods()) {
        contextMethod = declaredMethod.getName();
        insertPermissionChecks(declaredMethod,clazz,false);
      }
      return ctClass.toBytecode();
    } catch (Exception e) {
      System.err.println("Failed while injecting access check in: "+className+":"+contextMethod);
      e.printStackTrace();
      throw new UnsupportedOperationException();
    }
  }

  private final void insertPermissionChecks(CtBehavior behavior,Class<?> annotationClass,boolean afterSuper)
      throws ClassNotFoundException, CannotCompileException {
    if (!Modifier.isNative(behavior.getModifiers())) {
      Object annotationObj = behavior.getAnnotation(annotationClass);
      if(annotationObj == null)return;
      AnnotationsAttribute annotationsAttribute = (AnnotationsAttribute) behavior.getMethodInfo().getAttribute(AnnotationsAttribute.visibleTag);
      Annotation annotation = annotationsAttribute.getAnnotation(annotationMark);
      annotation.addMemberValue("id",new LongMemberValue(methodId,behavior.getMethodInfo()
          .getConstPool()));
      annotationsAttribute.setAnnotation(annotation);
      String genericSignature = behavior.getGenericSignature();
      String statement = String.format(staticMethodCall, behavior.getName(), genericSignature == null ? behavior.getSignature() : genericSignature, methodId++);
      if(afterSuper)
        behavior.insertAfter(statement);
      else behavior.insertBefore(statement);
    }
  }
}
