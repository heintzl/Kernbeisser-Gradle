package kernbeisser.Forms.ObjectView;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import java.awt.*;
import java.util.Locale;
import javax.swing.*;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import jiconfont.IconCode;
import jiconfont.icons.font_awesome.FontAwesome;
import jiconfont.swing.IconFontSwing;
import kernbeisser.CustomComponents.SearchBox.SearchBoxController;
import kernbeisser.CustomComponents.SearchBox.SearchBoxView;
import kernbeisser.Useful.ActuallyCloneable;
import kernbeisser.Windows.MVC.IView;
import kernbeisser.Windows.MVC.Linked;
import org.jetbrains.annotations.NotNull;

public class ObjectViewView<T extends ActuallyCloneable> implements IView<ObjectViewController<T>> {

    private JButton add;
    private JButton edit;
    private JButton back;
    private JButton delete;
    private SearchBoxView<T> searchBoxView;
    private JPanel main;
    private JPanel extraButtons;

    @Linked
    private ObjectViewController<T> controller;

    @Linked
    private SearchBoxController<T> searchBoxController;

    @Linked
    private String title;

    JPanel getExtraButtonPanel() {
        return extraButtons;
    }

    Font getButtonFont() {
        return edit.getFont();
    }

    void setEditAvailable(boolean s) {
        edit.setEnabled(s);
    }

    void setRemoveAvailable(boolean s) {
        delete.setEnabled(s);
    }

    void setAddAvailable(boolean s) {
        add.setEnabled(s);
    }

    private void createUIComponents() {
        searchBoxView = searchBoxController.getView();
    }

    boolean commitDelete() {
        return JOptionPane.showConfirmDialog(
                getTopComponent(), "Soll dieses Objekt wirklich gelöscht werden?")
                == 0;
    }

    @Override
    public void initialize(ObjectViewController<T> controller) {
        add.setIcon(IconFontSwing.buildIcon(FontAwesome.PLUS, 20, new Color(71, 189, 23)));
        edit.setIcon(IconFontSwing.buildIcon(FontAwesome.PENCIL, 20, new Color(69, 189, 174)));
        delete.setIcon(IconFontSwing.buildIcon(FontAwesome.TRASH, 20, new Color(189, 101, 85)));
        add.addActionListener(e -> controller.add());
        edit.addActionListener(e -> controller.edit());
        delete.addActionListener(e -> controller.remove());
        back.addActionListener(e -> back());
    }

    @Override
    public @NotNull JComponent getContent() {
        return main;
    }

    @Override
    public IconCode getTabIcon() {
        return FontAwesome.PENCIL;
    }

    @Override
    public String getTitle() {
        return title;
    }

    public void messageSelectObjectFirst() {
        message("Bitte wähle zunächst ein Objekt aus.");
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

  /**
   * Method generated by IntelliJ IDEA GUI Designer >>> IMPORTANT!! <<< DO NOT edit this method OR
   * call it in your code!
   *
   * @noinspection ALL
   */
  private void $$$setupUI$$$() {
        createUIComponents();
        main = new JPanel();
        main.setLayout(new GridLayoutManager(2, 2, new Insets(10, 10, 10, 10), -1, -1));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 6, new Insets(0, 0, 0, 0), -1, -1));
        main.add(panel1, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, new Dimension(-1, 50), 0, false));
        add = new JButton();
        Font addFont = this.$$$getFont$$$(null, Font.BOLD, -1, add.getFont());
        if (addFont != null) add.setFont(addFont);
        add.setHorizontalTextPosition(2);
        add.setText("Hinzufügen");
        panel1.add(add, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        edit = new JButton();
        Font editFont = this.$$$getFont$$$(null, Font.BOLD, -1, edit.getFont());
        if (editFont != null) edit.setFont(editFont);
        edit.setHorizontalTextPosition(2);
        edit.setText("Bearbeiten");
        panel1.add(edit, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        back = new JButton();
        Font backFont = this.$$$getFont$$$(null, Font.BOLD, -1, back.getFont());
        if (backFont != null) back.setFont(backFont);
        back.setText("Schließen");
        panel1.add(back, new GridConstraints(0, 5, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        delete = new JButton();
        Font deleteFont = this.$$$getFont$$$(null, Font.BOLD, -1, delete.getFont());
        if (deleteFont != null) delete.setFont(deleteFont);
        delete.setHorizontalTextPosition(2);
        delete.setText("Löschen");
        panel1.add(delete, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        extraButtons = new JPanel();
        extraButtons.setLayout(new FlowLayout(FlowLayout.CENTER, 10, 5));
        extraButtons.setVisible(true);
        panel1.add(extraButtons, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 1, false));
        main.add(searchBoxView.$$$getRootComponent$$$(), new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        final Spacer spacer2 = new Spacer();
        main.add(spacer2, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_VERTICAL, 1, GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
    }

  /**
   * @noinspection ALL
   */
  private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

  /**
   * @noinspection ALL
   */
  public JComponent $$$getRootComponent$$$() {
        return main;
    }

}
