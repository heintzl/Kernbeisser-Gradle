package kernbeisser.Windows.TabbedPane;

import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;
import java.awt.*;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Locale;
import javax.swing.*;
import javax.swing.border.EmptyBorder;
import javax.swing.border.TitledBorder;
import javax.swing.plaf.FontUIResource;
import javax.swing.text.StyleContext;
import jiconfont.icons.font_awesome.FontAwesome;
import jiconfont.swing.IconFontSwing;

public class DefaultTab {

  private JLabel tabTitle;
  private JLabel icon;
  private JPanel main;
  private JButton close;

  DefaultTab(Icon icon, String title, Runnable closeOperation, Runnable click) {
    // @spotless:off

    $$$setupUI$$$();
    this.icon.setIcon(icon);
    this.tabTitle.setText(title);
    main.setPreferredSize(
        new Dimension(tabTitle.getFontMetrics(tabTitle.getFont()).stringWidth(title) + 90, 20));
    close.setIcon(IconFontSwing.buildIcon(FontAwesome.TIMES, 20, Color.GRAY));
    close.addMouseListener(
        new MouseAdapter() {
          @Override
          public void mouseClicked(MouseEvent e) {
            closeOperation.run();
          }
        });
    close.setRolloverIcon(IconFontSwing.buildIcon(FontAwesome.TIMES_CIRCLE, 20, Color.RED));
    close.setMargin(new Insets(-3, 0, 0, 0));
    MouseAdapter adapter =
        new MouseAdapter() {
          @Override
          public void mousePressed(MouseEvent e) {
            click.run();
          }
        };
    this.icon.addMouseListener(adapter);
    tabTitle.addMouseListener(adapter);
    tabTitle.setBorder(new EmptyBorder(-3, 0, 0, 0));
    main.addMouseListener(adapter);
  }

  public JPanel getMain() {
    return main;
  }

  private void createUIComponents() {
    main =
        new JPanel() {
          @Override
          protected void paintComponent(Graphics g) {}
        };
  }

    /** Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        createUIComponents();
        main.setLayout(new GridLayoutManager(1, 4, new Insets(0, 0, 0, 0), -1, -1));
        main.setAutoscrolls(true);
        main.setBackground(new Color(-65537));
        main.setFocusable(false);
        main.setMinimumSize(new Dimension(142, 20));
        main.setPreferredSize(new Dimension(200, 20));
        main.setBorder(BorderFactory.createTitledBorder(BorderFactory.createEmptyBorder(), null, TitledBorder.DEFAULT_JUSTIFICATION, TitledBorder.DEFAULT_POSITION, null, null));
        close = new JButton();
        close.setBorderPainted(false);
        close.setContentAreaFilled(false);
        close.setDefaultCapable(true);
        close.setDoubleBuffered(true);
        close.setFocusPainted(false);
        close.setFocusable(true);
        close.setHorizontalAlignment(4);
        close.setOpaque(false);
        close.setText("");
        close.setVerticalAlignment(1);
        close.setVerticalTextPosition(1);
        close.setVisible(true);
        main.add(close, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_NORTH, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        icon = new JLabel();
        icon.setFocusable(false);
        icon.setText("");
        main.add(icon, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        main.add(spacer1, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        tabTitle = new JLabel();
        tabTitle.setFocusable(false);
        Font tabTitleFont = this.$$$getFont$$$(null, -1, 16, tabTitle.getFont());
        if (tabTitleFont != null) tabTitle.setFont(tabTitleFont);
        tabTitle.setText("text");
        main.add(tabTitle, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_NORTHWEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /** @noinspection ALL */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        Font font = new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
        boolean isMac = System.getProperty("os.name", "").toLowerCase(Locale.ENGLISH).startsWith("mac");
        Font fontWithFallback = isMac ? new Font(font.getFamily(), font.getStyle(), font.getSize()) : new StyleContext().getFont(font.getFamily(), font.getStyle(), font.getSize());
        return fontWithFallback instanceof FontUIResource ? fontWithFallback : new FontUIResource(fontWithFallback);
    }

    /** @noinspection ALL */
    public JComponent $$$getRootComponent$$$() {
        return main;
    }

  // @spotless:on
}
