Index: src/main/java/kernbeisser/Windows/AccountingReports/AccountingReportsController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package kernbeisser.Windows.AccountingReports;\r\n\r\nimport java.time.*;\r\nimport java.time.temporal.ChronoUnit;\r\nimport java.util.Collection;\r\nimport java.util.stream.Collectors;\r\nimport kernbeisser.DBEntities.Transaction;\r\nimport kernbeisser.DBEntities.User;\r\nimport kernbeisser.Enums.ExportTypes;\r\nimport kernbeisser.Enums.PermissionKey;\r\nimport kernbeisser.Enums.StatementType;\r\nimport kernbeisser.Exeptions.IncorrectInput;\r\nimport kernbeisser.Exeptions.NoTransactionsFoundException;\r\nimport kernbeisser.Reports.*;\r\nimport kernbeisser.Security.Key;\r\nimport kernbeisser.Useful.Tools;\r\nimport kernbeisser.Windows.CashierShoppingMask.CashierShoppingMaskModel;\r\nimport kernbeisser.Windows.MVC.Controller;\r\nimport lombok.var;\r\n\r\npublic class AccountingReportsController\r\n    extends Controller<AccountingReportsView, AccountingReportsModel> {\r\n\r\n  @Key(PermissionKey.ACTION_OPEN_ACCOUNTING_REPORTS)\r\n  public AccountingReportsController() {\r\n    super(new AccountingReportsModel());\r\n  }\r\n\r\n  ExportTypes[] getExportTypes() {\r\n    return model.getExportTypes();\r\n  }\r\n\r\n  Collection<String> getUserKeySortOrders() {\r\n    return model.getUserKeySortOrders();\r\n  }\r\n\r\n  private void consumePdfException(Throwable e, ExportTypes exportType) {\r\n    try {\r\n      try {\r\n        throw e;\r\n      } catch (RuntimeException r) {\r\n        throw r.getCause();\r\n      }\r\n    } catch (IncorrectInput i) {\r\n      getView().messageNoItems(e.getMessage());\r\n    } catch (UnsupportedOperationException u) {\r\n      getView().messageNotImplemented(exportType);\r\n    } catch (Throwable t) {\r\n      Tools.showUnexpectedErrorWarning(t);\r\n    }\r\n  }\r\n\r\n  private void exportReport(Report report, String message) {\r\n    var view = getView();\r\n    var exportType = view.getExportType();\r\n    try {\r\n      AccountingReportsModel.exportReport(\r\n          exportType, report, message, e -> consumePdfException(e, exportType));\r\n    } catch (UnsupportedOperationException e) {\r\n      view.messageNotImplemented(exportType);\r\n    }\r\n  }\r\n\r\n  public void exportTillroll(Instant startDate, Instant endDate) {\r\n    if (!startDate.isBefore(endDate)) {\r\n      getView().messageDateValues();\r\n      return;\r\n    }\r\n    exportReport(\r\n        new TillrollReport(startDate, endDate.plus(1, ChronoUnit.DAYS)), \"Bonrolle wird erstellt\");\r\n  }\r\n\r\n  public void exportAccountingReport(int reportNo, boolean withNames) {\r\n    var view = getView();\r\n    if (reportNo == Transaction.getLastReportNo() + 1) {\r\n      try {\r\n        CashierShoppingMaskModel.printAccountingReports(\r\n            Transaction.getUnreportedTransactions(), view::messageNoAccountingReport);\r\n      } catch (NoTransactionsFoundException e) {\r\n        view.messageEmptyReportNo(reportNo);\r\n      }\r\n    } else {\r\n      try {\r\n        var reportTransactions =\r\n            Transaction.getTransactionsByReportNo(reportNo).stream()\r\n                .filter(t -> t.isAccountingReportTransaction() || t.isPurchase())\r\n                .collect(Collectors.toList());\r\n        if (reportTransactions.isEmpty()) throw new NoTransactionsFoundException();\r\n        AccountingReportsModel.exportAccountingReports(reportTransactions, reportNo, withNames);\r\n      } catch (NoTransactionsFoundException e) {\r\n        view.messageEmptyReportNo(reportNo);\r\n      }\r\n    }\r\n  }\r\n\r\n  public void exportUserBalance(boolean userBalanceWithNames) {\r\n    exportReport(new UserBalanceReport(0, userBalanceWithNames), \"Guthabenst채nde werden erstellt\");\r\n  }\r\n\r\n  public void exportKeyUserList(String sortOrder) {\r\n    exportReport(new KeyUserList(sortOrder), \"Benutzer-Schl체ssel-Liste wird erstellt\");\r\n  }\r\n\r\n  public void exportTransactionStatement(User user, StatementType statementType, boolean current) {\r\n    exportReport(\r\n        new TransactionStatement(user, statementType, current), \"Kontoauszug wird erstellt\");\r\n  }\r\n\r\n  public void exportPermissionHolders(boolean permissionHoldersWithKeys) {\r\n    exportReport(\r\n        new PermissionHolders(permissionHoldersWithKeys), \"Rolleninhaber-Bericht wird erstellt\");\r\n  }\r\n\r\n  @Override\r\n  public void fillView(AccountingReportsView accountingReportsView) {\r\n    accountingReportsView.setUser(User.getAllUserFullNames(true));\r\n    accountingReportsView.getOptAccountingReport().doClick();\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/kernbeisser/Windows/AccountingReports/AccountingReportsController.java b/src/main/java/kernbeisser/Windows/AccountingReports/AccountingReportsController.java
--- a/src/main/java/kernbeisser/Windows/AccountingReports/AccountingReportsController.java	(revision c503879f0d686b5b656088372daca740eb0070c9)
+++ b/src/main/java/kernbeisser/Windows/AccountingReports/AccountingReportsController.java	(date 1647197694000)
@@ -70,7 +70,7 @@
         new TillrollReport(startDate, endDate.plus(1, ChronoUnit.DAYS)), "Bonrolle wird erstellt");
   }
 
-  public void exportAccountingReport(int reportNo, boolean withNames) {
+  public void exportAccountingReport(long reportNo, boolean withNames) {
     var view = getView();
     if (reportNo == Transaction.getLastReportNo() + 1) {
       try {
@@ -93,8 +93,8 @@
     }
   }
 
-  public void exportUserBalance(boolean userBalanceWithNames) {
-    exportReport(new UserBalanceReport(0, userBalanceWithNames), "Guthabenst채nde werden erstellt");
+  public void exportUserBalance(long reportNo, boolean userBalanceWithNames) {
+    exportReport(new UserBalanceReport(reportNo, userBalanceWithNames), "Guthabenst채nde werden erstellt");
   }
 
   public void exportKeyUserList(String sortOrder) {
